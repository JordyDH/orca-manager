import json
import uuid
from pathlib import Path

def list_profiles(folder_path):
    files = [f for f in folder_path.rglob("*.json") if f.is_file() and any(m in f.name for m in MANAGED_PROFILE_MARKERS)]
    return sorted(files)

def register(subparsers):
    subparsers.add_parser("clone", help="Clone an existing profile into a new one")

def run(args):
    print("üîÅ Clone a profile")
    profile_type = input("Select profile type (filament/machine/process): ").strip().lower()
    if profile_type not in PROFILE_FOLDERS:
        print("‚ùå Invalid type.")
        return

    folder_path = ORCA_USER_PATH / profile_type
    profiles = list_profiles(folder_path)

    if not profiles:
        print(f"‚ùå No {profile_type} profiles found.")
        return

    print(f"\nAvailable {profile_type} profiles:")
    for i, f in enumerate(profiles):
        print(f"[{i}] {f.name}")

    try:
        index = int(input(f"\nEnter ID of profile to clone (0-{len(profiles)-1}): ").strip())
        selected_file = profiles[index]
    except (ValueError, IndexError):
        print("‚ùå Invalid selection.")
        return

    new_name = input("Enter a name for the new profile: ").strip()
    if not new_name:
        print("‚ùå No name given.")
        return

    # Load and modify
    with selected_file.open("r", encoding="utf-8") as f:
        data = json.load(f)

    data["name"] = new_name
    if "filament_settings_id" in data:
        data["filament_settings_id"] = str(uuid.uuid4())
    if "comment" not in data:
        data["comment"] = "Generated by orca-manager clone"

    # Save under new filename
    new_filename = f"{new_name}.json"
    new_path = folder_path / new_filename

    with new_path.open("w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)

    print(f"\n‚úÖ Cloned to: {new_path}")
